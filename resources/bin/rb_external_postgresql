#!/usr/bin/ruby

#######################################################################
### Copyright (c) 2014 ENEO Tecnolog√≠a S.L.
### This file is part of redBorder.
### redBorder is free software: you can redistribute it and/or modify
### it under the terms of the GNU Affero General Public License License as published by
### the Free Software Foundation, either version 3 of the License, or
### (at your option) any later version.
### redBorder is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU Affero General Public License License for more details.
### You should have received a copy of the GNU Affero General Public License License
### along with redBorder. If not, see <http://www.gnu.org/licenses/>.
#########################################################################

require 'rubygems'
require 'chef'
require 'json'
require 'netaddr'
require "getopt/std"

EXTERNAL_NAME="postgresql"
DEFAULT_PORT=5432

def usage() 
  printf "rb_external_#{EXTERNAL_NAME} [ -h ] [ -d ] [ -f ] -r <hostname> -u <username> -w <password> -t <database> [ -p <port> ]\n"
  printf "    -h: print this help\n"
  printf "    -d: Disable this external\n"
  printf "    -f: force creation even if it need to overwrite it\n"
  printf "    -p <port>: #{EXTERNAL_NAME} port (default: #{DEFAULT_PORT})\n"
  printf "    -r <hostname>: remote #{EXTERNAL_NAME} address (mandatory)\n"
  printf "    -u <username>: username database (mandatory)\n"
  printf "    -w <password>: password database (mandatory)\n"
  printf "    -t redborder|druid|opscode_chef|oozie: database (mandatory)\n"
  exit 1
end

Chef::Config.from_file("/etc/chef/client.rb")
Chef::Config[:node_name]  = "admin"
Chef::Config[:client_key] = "/etc/chef-server/admin.pem"
Chef::Config[:http_retry_count] = 5

opt = Getopt::Std.getopts("hdfp:r:u:w:t:")
ret=0

if opt["h"]
  usage
else
  database=opt["u"] if opt["t"].nil? 
  if opt["t"].nil? 
    database=opt["u"]
  else
    database=opt["t"]
  end

  usage if (database!="redborder" and database!="druid" and database!="opscode_chef" and database!="oozie")

  if opt["u"].nil?
    username=database
  else
    username=opt["u"]
  end

  if !opt["d"]
    usage if (opt["r"].nil? or database.nil? or username.nil? or opt["w"].nil?)
  end

  if !opt["r"].nil? and opt["r"].split(':').size > 1
    port=opt["r"].split(':')[1]
    external_hostname=opt["r"].split(':')[0]
  else
    external_hostname=opt["r"]
  end

  if opt["p"].nil?
    port=DEFAULT_PORT
  else
    port=opt["p"].to_i
  end

  password=opt["w"]

  port=DEFAULT_PORT if (port>65535 or port<=0)

  create=false

  begin 
    role = Chef::Role.load("manager")

    role.override_attributes["redBorder"] = {} if role.override_attributes["redBorder"].nil?
    role.override_attributes["redBorder"]["manager"] = {} if role.override_attributes["redBorder"]["manager"].nil?
    role.override_attributes["redBorder"]["manager"]["externals"] = {} if role.override_attributes["redBorder"]["manager"]["externals"].nil?
    role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME] = {} if role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME].nil?
    role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database] = {} if role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database].nil?

    save=false

    if opt["d"]
      role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["enabled"] = false
      save=true
    else
      if role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["hostname"].nil? or role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["port"].nil? or role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["enabled"] == false or role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["enabled"].nil? or role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["pass"].nil? or role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["username"].nil? or opt["f"]
        create=true
      else
        printf "INFO: Your have specified an external #{EXTERNAL_NAME} server #{role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["hostname"]}:#{role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database]["port"]}. Would you like to overwrite it? (y/N) "
        var = gets.chomp
        if (var=="y" or var == "Y")
          save=true
          create=true
        else
          save=false
          create=false
        end
      end 

      if create
        save=true
        role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database].each do |k,v|
          role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database][k]=nil
        end

        {:enabled => true, :port => port, :hostname => external_hostname, :username => username, :pass => password, :database => database }.each do |k,v|        
          role.override_attributes["redBorder"]["manager"]["externals"][EXTERNAL_NAME][database][k] = v
        end
      end
    end

    if save
      if role.save
        printf "INFO: Manager saved successfully - #{EXTERNAL_NAME} (#{database})\n"
      else
        printf "ERROR: Role manager can not be saved\n"
      end
    end
  rescue => e
    printf "ERROR: cannot contact chef-server #{Chef::Config[:chef_server_url]}\n"
    puts "#{e}\n\t#{e.backtrace.join("\n\t")}"
    ret=1
  end
end

exit ret

