#!/bin/bash
#######################################################################
# Copyright (c) 2014 ENEO Tecnolog√≠a S.L.
# This file is part of redBorder.
# redBorder is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# redBorder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License License for more details.
# You should have received a copy of the GNU Affero General Public License License
# along with redBorder. If not, see <http://www.gnu.org/licenses/>.
#######################################################################

source /etc/profile
source /usr/lib/redborder/bin/rb_manager_functions.sh

ds_services_stop=" chef-client keepalived \
    nginx \
    awslogs rb-cloudwatch \
    rb-monitor rb-workers rb-webui nprobe n2klocd nmspd n2kmobiled trap2kafka freeradius \
    chef-expander chef-solr chef-server-webui erchef rabbitmq bookshelf \
    storm_nimbus storm_supervisor storm_ui \
    druid_broker druid_historical druid_realtime druid_middleManager druid_overlord druid_coordinator \
    memcached \
    kafka zookeeper zookeeper2 \
    hadoop_datanode hadoop_nodemanager hadoop_resourcemanager hadoop_namenode hadoop_historyserver \
    stanchion riak-cs riak \
    sqsld \
    pgpool postgresql"
ds_services_start=" keepalived postgresql pgpool \
    riak riak-cs stanchion \
    hadoop_historyserver hadoop_namenode hadoop_resourcemanager hadoop_nodemanager hadoop_datanode hadoop_historyserver \
    zookeeper2 zookeeper kafka \
    memcached \
    druid_coordinator druid_realtime druid_middleManager druid_overlord druid_historical druid_broker \
    storm_nimbus storm_supervisor storm_ui \
    bookshelf rabbitmq erchef chef-server-webui chef-solr chef-expander \
    rb-webui rb-workers rb-monitor nprobe nmspd n2klocd n2kmobiled trap2kafka freeradius \
    awslogs rb-cloudwatch \
    nginx \
    sqsld \
    rb-discover chef-client"

function usage(){
    echo "$0 ( start|force-start|stop|restart|force-restart|reload|status | ((<nodename>|all) start|force-start|stop|restart|force-restart|reload|status)) [ service1 ]  [ service2 ] [ ... ]"
    exit 1
}

NODES=$(hostname)
ACTION="$1"

if [ "x$ACTION" == "x" ]; then
    usage
elif [ "x$ACTION" != "xstart" -a "x$ACTION" != "xstop" -a "x$ACTION" != "xrestart" -a "x$ACTION" != "xreload" -a "x$ACTION" != "xstatus" -a "x$ACTION" != "xforce-restart" -a "x$ACTION" != "xforce-start" -a "x$ACTION" != "x" ]; then
    NODES="$1"
    shift
    ACTION="$1"
    if [ "x$ACTION" != "xstart" -a "x$ACTION" != "xstop" -a "x$ACTION" != "xrestart" -a "x$ACTION" != "xreload" -a "x$ACTION" != "xstatus" -a "x$ACTION" != "xforce-restart" -a "x$ACTION" != "xforce-start" -a "x$ACTION" != "x"  ]; then
        usage
    fi
fi

shift
SERVICES="$*"

[ "x$SERVICES" == "xall" ] && SERVICES=""

if [ "x$SERVICES" == "x" ]; then
    if [ "x$ACTION" == "xrestart" ]; then
        for n in $ds_services_stop; do
            SERVICES="$SERVICES $n:$ACTION"
        done
    elif [ "x$ACTION" == "xstop" -o "x$ACTION" == "xforce-restart" ]; then
        for n in $ds_services_stop; do
            SERVICES="$SERVICES $n:stop"
        done
    elif [ "x$ACTION" == "xstart" -o "x$ACTION" == "xforce-start" ]; then
        for n in $ds_services_start; do
            SERVICES="$SERVICES $n:$ACTION"
        done
    fi
    if [ "x$ACTION" == "xforce-restart" ]; then
        for n in $ds_services_start; do
            SERVICES="$SERVICES $n:start"
        done
    fi
    [ "x$ACTION" == "xstatus" ] && SERVICES="$ds_services_stop"
elif [ "x$ACTION" == "xforce-restart" ]; then
    SERVICES2=""
    for n in $SERVICES; do
        SERVICES2="$SERVICES2 $n:stop"
    done
    for n in $SERVICES; do
        SERVICES2="$SERVICES2 $n:start"
    done
    SERVICES="$SERVICES2"
fi

CMD="source /usr/lib/redborder/bin/rb_functions.sh"

for n in $(echo "$SERVICES" | tr ',' ' ' | tr ';' ' ' ); do
    if [ "x$n" == "xdruid" -o "x$n" == "xrb_hadoop" -o "x$n" == "xrb_chef" ]; then
        CMD="${CMD};$n ${ACTION}"
    elif [ "x$n" == "xstorm" -o "x$n" == "xhadoop" ]; then
        CMD="${CMD};rb_$n ${ACTION}"
    else
        echo $n | grep -q ":"
        if [ $? -eq 0 ]; then
            a=$(echo $n | tr ':' ' ' | awk '{print $2}')
            n=$(echo $n | sed 's/:.*//')
        else
            a="$ACTION"
        fi

        if [ "x$a" == "x1" ]; then
            a="start"
        elif [ "x$a" == "x0" ]; then
            a="stop"
        fi

        for n2 in $(ls /etc/init.d/*$n* 2>/dev/null); do
            n2=$(basename $n2)
            if [ -f /etc/init.d/$n2 ]; then
                if [ "x$a" == "xstart" -o "x$a" == "xrestart" -o "x$a" == "xforce-start" ]; then
                    if [ "x$n2" == "xkeepalived" ]; then
                        CMD="${CMD}; get_mode $n2; if [ \"x\$mode\" == \"xenabled\" ]; then /etc/init.d/$n2 $a; sleep 10; elif [ -f /opt/rb/etc/mode/$n2 ]; then /etc/init.d/$n2 status &>/dev/null; [ \$? -ne 3 ] && /etc/init.d/$n2 stop; fi"
                    else
                        CMD="${CMD}; get_mode $n2; if [ \"x\$mode\" == \"xenabled\" ]; then /etc/init.d/$n2 $a; elif [ -f /opt/rb/etc/mode/$n2 ]; then /etc/init.d/$n2 status &>/dev/null; [ \$? -ne 3 ] && /etc/init.d/$n2 stop; fi"
                    fi
                else
                    CMD="${CMD}; /etc/init.d/$n2 $a"
                fi
            fi
        done
    fi

done

if [ -f /usr/lib/redborder/bin/rb_manager_ssh.sh ]; then
    [ "x$NODES" == "xall" ] && NODES=$(/usr/lib/redborder/bin/rb_get_managers.rb -ca 2>/dev/null| sed 's/ $//')
    basetmp="/tmp/rb_service-$$"
    counter=0
    for n in $(echo "$NODES" | tr ',' ' ' | tr ';' ' ' ); do
        if [ $counter -ne 0 ]; then
            echo -n "" > ${basetmp}-${n}.out
            rb_manager_ssh.sh $n $CMD  > ${basetmp}-${n}.out 2>&1 &
            echo $! > ${basetmp}-${n}.pid
        fi
        counter=$(( $counter + 1 ))
    done
    n=$(echo "$NODES" | tr ',' ' ' | tr ';' ' ' | awk '{print $1}' )
    if [ "x$n" != "x" ]; then
        e_title "Node: $n"
        rb_manager_ssh.sh $n $CMD
    fi

    counter=0
    for n in $(echo "$NODES" | tr ',' ' ' | tr ';' ' ' ); do
        if [ "x$counter" != "x0" ]; then
            e_title "Node: $n"
            while [ -f ${basetmp}-${n}.pid ]; do
                pid=$(cat ${basetmp}-${n}.pid | awk '{print $1}')
                finished=0
                if [ -f /proc/$pid/cmdline ]; then
                    cat /proc/$pid/cmdline 2>/dev/null | grep -q rb_service
                    if [ $? -ne 0 ]; then
                        finished=1
                    fi
                else
                    finished=1
                fi
                if [ $finished -eq 1 ]; then
                    strings ${basetmp}-${n}.out
                    rm -f ${basetmp}-${n}.pid ${basetmp}-${n}.out
                else
                    sleep 1
                fi
            done
        fi
        counter=$(( $counter + 1 ))
    done
else
    bash -c "$CMD"
fi
