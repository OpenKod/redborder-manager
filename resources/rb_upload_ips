#!/usr/bin/ruby

#######################################################################
## Copyright (c) 2014 ENEO Tecnolog√≠a S.L.
## This file is part of redBorder.
## redBorder is free software: you can redistribute it and/or modify
## it under the terms of the GNU Affero General Public License License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## redBorder is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Affero General Public License License for more details.
## You should have received a copy of the GNU Affero General Public License License
## along with redBorder. If not, see <http://www.gnu.org/licenses/>.
########################################################################

require 'rubygems'
require 'chef'
require 'json'
require 'netaddr'
require "getopt/std"

Chef::Config.from_file("/etc/chef/client.rb")
Chef::Config[:node_name]  = "admin"
Chef::Config[:client_key] = "/etc/chef-server/admin.pem"
Chef::Config[:http_retry_count] = 5

DBINAME="ipvirtual-erchef"
DBNAME="rBglobal"
NAMES={"k"=>"kafka", "c" => "erchef", "s" => "riak" , "r" => "rb-webui", "n" => "nprobe", "a" => "kafka", "t" => "riak", "f" => "erchef", "p" => "postgresql", "z" => "trap2kafka", "l" => "n2klocd", "m" => "n2kmobiled", "x" => "freeradius", "q" => "zookeeper2", "o" => "oozie", "u" => "hadoop_resourcemanager", "g" => "hadoop_namenode", "h" => "drill"}

opt = Getopt::Std.getopts("e:k:c:s:r:n:i:a:t:f:p:m:l:z:x:o:u:h:dbyg:")

ip_regex = /^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$/

if File.exist?("/etc/redborder/cluster-installed.txt") or !opt["y"].nil?
  hostname = `hostname -s`.strip
  node = Chef::Node.load(hostname)

  ips = []
  ["k", "c", "s", "r", "n", "m", "l", "z", "x"].each do |x|
    ips << {:ip => (opt["e"].nil? ? opt[x] : opt["e"]), :mode => "external", :name => NAMES[x]} if opt[x] or opt["e"]
  end
  ["a", "t", "f", "p", "o", "u", "g", "w"].each do |x|
    ips << {:ip => (opt["i"].nil? ? opt[x] : opt["i"]), :mode => "internal", :name => NAMES[x]} if opt[x] or opt["i"]
  end

  if ips.size>0
    ips.each do |x|
      if opt["d"]
        data = Chef::DataBagItem.load(DBNAME, "ipvirtual-#{x[:mode]}-#{x[:name]}") rescue data=nil
        if data.nil?
          printf "Chef::DataBagItem ipvirtual-#{x[:mode]}-#{x[:name]} not found\n"
        else
          data.delete("ip")
          if data.save
            printf "Databag ipvirtual-#{x[:mode]}-#{x[:name]} deleted successfully\n"
          else
            printf "ERROR: Databag ipvirtual-#{x[:mode]}-#{x[:name]} can not be deleted\n"
          end
        end
      else
        if x[:ip] =~ ip_regex
          data = Chef::DataBagItem.new
          data.data_bag DBNAME
          data["id"] = "ipvirtual-#{x[:mode]}-#{x[:name]}"
          if x[:mode] == "external"
              data["loadbalance"] = opt["b"].nil?
          else
              data["loadbalance"] = false
          end
          data["ip"] = x[:ip]
          if data.save
            printf "Databag ipvirtual-#{x[:mode]}-#{x[:name]} uploaded successfully\n"
          else
            printf "ERROR: Databag ipvirtual-#{x[:mode]}-#{x[:name]} can not be uploaded\n"
          end
        else
          printf "ERROR: #{x[:ip]} is not a valid ip address\n"
        end
      end
    end
  else
    ["external-kafka", "external-erchef", "external-riak", "external-rb-webui", "external-nprobe", "external-freeradius", "external-trap2kafka", "external-n2klocd", "external-n2kmobiled", "internal-kafka", "internal-riak", "internal-erchef", "internal-postgresql", "internal-zookeeper2", "internal-oozie", "internal-hadoop_resourcemanager", "internal-hadoop_namenode", "internal-drill" ].each do |x|
      data = Chef::DataBagItem.load(DBNAME, "ipvirtual-#{x}") rescue data=nil
      if data.nil? or data["ip"].nil?
        printf "Chef::DataBagItem ipvirtual-#{x} not found\n"
      else
        printf "Chef::DataBagItem ipvirtual-#{x} => #{data.values.last}"
        printf "    ( disabled load balance - ipvs ) " if (!data["loadbalance"].nil? and data["loadbalance"]==false)
        printf "\n"
      end
    end
    printf "\n"
    printf "Help: \n"
    printf "rb_upload_ips [-<option> ip][-h][-b][-d]\n"
    printf "    -d: delete instead of add new databag\n"
    printf "    -b: disable load balancing for these ips - only for external ips\n"
    printf "    -h: print this help\n"
    printf "    -<option> can be one of the following:\n"
    printf "        -e all bond0 cluster ips (bond0)\n"
    printf "        -k kafka cluster ip (bond0)\n"
    printf "        -c erchef cluster ip (bond0)\n"
    printf "        -s riak s3 cluster ip (bond0)\n"
    printf "        -l n2klocd cluster ip (bond0)\n"
    printf "        -m n2kmobiled cluster ip (bond0)\n"
    printf "        -z trap2kafka cluster ip (bond0)\n"
    printf "        -r redBorder webui cluster ip (bond0)\n"
    printf "        -n netflow collector cluster ip (bond0)\n"
    printf "        -x freeradius cluster ip (bond0)\n"
    printf "        -i all bond1 cluster ups (bond1)\n"
    printf "        -a kafka cluster ip (bond1)\n"
    printf "        -t riak s3 cluster ip (bond1)\n"
    printf "        -f erchef cluster ip (bond1)\n"
    printf "        -p postgresql cluster ip (bond1)\n"
    printf "        -q zookeeper2 cluster ip (bond1)\n"
    printf "        -o oozie cluster ip (bond1)\n"
    printf "        -u hadoop_resourcemanager cluster ip (bond1)\n"
    printf "        -g hadoop_namenode cluster ip (bond1)\n"
    printf "        -h drill cluster ip (bond1)\n"
  end
else
  printf "The manager has not finished configuring the cluster. Please wait\n"
end

